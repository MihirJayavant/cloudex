{"version":3,"sources":["models/index.ts","models/async-data-state.model.ts","store/actions/todo-page.action.ts","store/actions/post-page.action.ts","components/todo/todo-caption/todo-caption.tsx","components/todo/todo-item/todo-item.tsx","components/todo/todo-list/todo-list.tsx","store/reducers/todo-page.reducer.ts","store/reducers/post-page.reducer.ts","store/reducers/index.ts","store/selectors/todo-page.selector.ts","store/selectors/post-page.selector.ts","http/http.ts","http/post-http.ts","store/effects/post-page.effects.ts","store/effects/index.ts","containers/todo-page/todo-page.tsx","components/post/post-item/post-item.tsx","components/post/post-list/post-list.tsx","containers/post-page/post-page.tsx","containers/home-page/home-page.tsx","containers/app/App.tsx","serviceWorker.js","index.tsx"],"names":["_todo_model__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","o","d","__webpack_exports__","_post_model__WEBPACK_IMPORTED_MODULE_1__","_async_data_state_model__WEBPACK_IMPORTED_MODULE_2__","AsyncDataState","TodoActionTypes","PostsActionTypes","TodoCaption","state","value","onChange","event","_this","setState","target","onAdd","props","_this2","this","react","className","type","placeholder","onClick","React","todoItem","click","index","data","list","map","todo_item","itemClick","key","id","initialState","todos","List","posts","dataState","INITIAL","reducer","combineReducers","arguments","length","undefined","action","ADD","Object","objectSpread","push","payload","todo","DELETE","delete","LOAD","LOADING","SUCCESS","LOADED","ERROR","getTodos","createSelector","s","getPostsState","getPosts","getPostsDataState","Http","classCallCheck","baseUrl","createClass","_get","asyncToGenerator","regenerator_default","a","mark","_callee","endpoint","res","wrap","_context","prev","next","axios","get","sent","abrupt","stop","_x","apply","PostHttp","http","loadPostsEffect","put","t0","error","_marked","allSagas","takeLatest","actions","effects_marked","TodoPage","onAddClick","trim","add","onItemClick","todo_caption","todo_list","mapDispatchToProps","Math","random","connect","postItem","title","body","post","post_item","PostPage","load","post_list","HomePage","Link","to","App","BrowserRouter","Switch","Route","path","exact","component","Redirect","from","Boolean","window","location","hostname","match","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleWare","createSagaMiddleware","createStore","applyMiddleware","run","ReactDOM","es","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.916d4560.chunk.js","sourcesContent":["export * from './todo.model'\r\nexport * from './post.model'\r\nexport * from './async-data-state.model'\r\n","export enum AsyncDataState {\r\n  INITIAL = 'Initial',\r\n  LOADED = 'Loaded',\r\n  LOADING = 'Loading',\r\n  ERROR = 'Error'\r\n}\r\n","import { Todo } from '../../models'\r\n\r\n//Action Types\r\n\r\nexport enum TodoActionTypes {\r\n  ADD = '[TodoPage] Add',\r\n  DELETE = '[TodoPage] Delete'\r\n}\r\n\r\n//Action Interface\r\n\r\nexport interface AddTodoAction {\r\n  type: TodoActionTypes.ADD\r\n  payload: { todo: Todo }\r\n}\r\n\r\nexport interface DeleteTodoAction {\r\n  type: TodoActionTypes.DELETE\r\n  payload: { index: number }\r\n}\r\n\r\n//Action Creators\r\n\r\nexport function addTodo(value: string): AddTodoAction {\r\n  return {\r\n    type: TodoActionTypes.ADD,\r\n    payload: {\r\n      todo: {\r\n        id: Math.random() * 1000,\r\n        value: value\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function deleteTodo(index: number): DeleteTodoAction {\r\n  return {\r\n    type: TodoActionTypes.DELETE,\r\n    payload: {\r\n      index: index\r\n    }\r\n  }\r\n}\r\n\r\nexport type TodoAction = AddTodoAction | DeleteTodoAction\r\n","import { Post } from '../../models'\r\nimport { List } from 'immutable'\r\n\r\n//Action Types\r\n\r\nexport enum PostsActionTypes {\r\n  LOAD = '[PostPage] Load',\r\n  SUCCESS = '[PostPage] Success',\r\n  ERROR = '[PostPage] Error'\r\n}\r\n\r\n//Action Interface\r\n\r\nexport interface LoadPostsAction {\r\n  type: PostsActionTypes.LOAD\r\n}\r\n\r\nexport interface SuccessPostsAction {\r\n  type: PostsActionTypes.SUCCESS\r\n  payload: { posts: List<Post> }\r\n}\r\n\r\nexport interface ErrorPostsAction {\r\n  type: PostsActionTypes.ERROR\r\n  payload: { error: string }\r\n}\r\n\r\n//Action Creators\r\n\r\nexport function loadPosts(): LoadPostsAction {\r\n  return {\r\n    type: PostsActionTypes.LOAD\r\n  }\r\n}\r\n\r\nexport function successPosts(posts: Post[]): SuccessPostsAction {\r\n  return {\r\n    type: PostsActionTypes.SUCCESS,\r\n    payload: {\r\n      posts: List(posts)\r\n    }\r\n  }\r\n}\r\n\r\nexport function errorPosts(error: string): ErrorPostsAction {\r\n  return {\r\n    type: PostsActionTypes.ERROR,\r\n    payload: {\r\n      error: error\r\n    }\r\n  }\r\n}\r\n\r\nexport type PostsAction = LoadPostsAction | SuccessPostsAction | ErrorPostsAction\r\n","import * as React from 'react'\r\n\r\ninterface ITodoCaptionProps {\r\n  onAdd: (value: string) => void\r\n}\r\n\r\ninterface ITodoCaptionState {\r\n  value: string\r\n}\r\n\r\nclass TodoCaption extends React.Component<ITodoCaptionProps, ITodoCaptionState> {\r\n  state = {\r\n    value: ''\r\n  }\r\n\r\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      value: event.target.value\r\n    })\r\n  }\r\n\r\n  onAdd = (value: string) => {\r\n    this.setState({ value: '' })\r\n    this.props.onAdd(value)\r\n  }\r\n\r\n  render() {\r\n    const value = this.state.value\r\n\r\n    return (\r\n      <div className=\"field has-addons\">\r\n        <div className=\"control\">\r\n          <input\r\n            className=\"input is-info\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Todo\"\r\n            onChange={this.onChange}\r\n            value={value}\r\n          />\r\n        </div>\r\n        <div className=\"control\">\r\n          <button className=\"button is-info\" onClick={() => this.onAdd(value)}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoCaption\r\n","import * as React from 'react'\r\nimport { Todo } from '../../../models/todo.model'\r\n\r\ninterface ITodoItemProps {\r\n  index: number\r\n  data: Todo\r\n  click: (index: number) => void\r\n}\r\n\r\nconst todoItem = (props: ITodoItemProps) => {\r\n  return (\r\n    <div className=\"todoItem\" onClick={() => props.click(props.index)}>\r\n      <div className=\"react-card\">\r\n        <div>{props.data.value}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default todoItem\r\n","import * as React from 'react'\r\nimport TodoItem from '../todo-item/todo-item'\r\nimport { Todo } from '../../../models'\r\nimport { List } from 'immutable'\r\n\r\ninterface ITodoListProps {\r\n  list: List<Todo>\r\n  itemClick: (index: number) => void\r\n}\r\n\r\nconst todoList = (props: ITodoListProps) => {\r\n  const list = props.list.map((data, index) => (\r\n    <TodoItem click={props.itemClick} data={data} index={index} key={data.id} />\r\n  ))\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <div className=\"flex-column\"> {list} </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(todoList)\r\n","import { List } from 'immutable'\r\nimport { Todo } from '../../models'\r\nimport { TodoAction, TodoActionTypes } from '../actions'\r\n\r\nexport interface TodoState {\r\n  todos: List<Todo>\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  todos: List([])\r\n}\r\n\r\nexport function todoReducer(state = initialState, action: TodoAction): TodoState {\r\n  switch (action.type) {\r\n    case TodoActionTypes.ADD:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.push(action.payload.todo)\r\n      }\r\n\r\n    case TodoActionTypes.DELETE:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.delete(action.payload.index)\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { List } from 'immutable'\r\nimport { Post, AsyncDataState } from '../../models'\r\nimport { PostsAction, PostsActionTypes } from '../actions'\r\n\r\nexport interface PostState {\r\n  posts: List<Post>\r\n  dataState: AsyncDataState\r\n}\r\n\r\nexport const initialState: PostState = {\r\n  posts: List([]),\r\n  dataState: AsyncDataState.INITIAL\r\n}\r\n\r\nexport function postsReducer(state = initialState, action: PostsAction): PostState {\r\n  switch (action.type) {\r\n    case PostsActionTypes.LOAD:\r\n      return {\r\n        ...state,\r\n        dataState: AsyncDataState.LOADING\r\n      }\r\n\r\n    case PostsActionTypes.SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: List(action.payload.posts),\r\n        dataState: AsyncDataState.LOADED\r\n      }\r\n\r\n    case PostsActionTypes.ERROR:\r\n      return {\r\n        ...state,\r\n        dataState: AsyncDataState.ERROR\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import * as fromTodo from './todo-page.reducer'\r\nimport * as fromPost from './post-page.reducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nexport interface State {\r\n  todos: fromTodo.TodoState\r\n  posts: fromPost.PostState\r\n}\r\n\r\nexport const reducer = combineReducers<State>({\r\n  todos: fromTodo.todoReducer,\r\n  posts: fromPost.postsReducer\r\n})\r\n","import { State } from '../reducers'\r\nimport { createSelector } from 'reselect'\r\n\r\nconst getTodoState = (state: State) => state.todos\r\n\r\nexport const getTodos = createSelector(\r\n  [getTodoState],\r\n  s => s.todos\r\n)\r\n","import { State } from '../reducers'\r\nimport { createSelector } from 'reselect'\r\n\r\nconst getPostsState = (state: State) => state.posts\r\n\r\nexport const getPosts = createSelector(\r\n  [getPostsState],\r\n  s => s.posts\r\n)\r\n\r\nexport const getPostsDataState = createSelector(\r\n  [getPostsState],\r\n  s => s.dataState\r\n)\r\n","import axios from 'axios'\r\n\r\nexport class Http {\r\n  private baseUrl = 'https://jsonplaceholder.typicode.com/'\r\n\r\n  async get<T>(endpoint: string) {\r\n    const res = await axios.get<T>(this.baseUrl + endpoint)\r\n    return res.data\r\n  }\r\n}\r\n","import { Http } from './http'\r\nimport { Post } from '../models'\r\n\r\nexport class PostHttp {\r\n  private http = new Http()\r\n\r\n  get() {\r\n    return this.http.get<Post[]>('posts')\r\n  }\r\n}\r\n","import { put } from 'redux-saga/effects'\r\nimport { PostsActionTypes, SuccessPostsAction, ErrorPostsAction } from '../actions'\r\nimport { List } from 'immutable'\r\nimport { Post } from '../../models'\r\nimport { PostHttp } from '../../http'\r\n\r\nexport function* loadPostsEffect() {\r\n  try {\r\n    const data: Post[] = yield new PostHttp().get()\r\n    yield put<SuccessPostsAction>({\r\n      type: PostsActionTypes.SUCCESS,\r\n      payload: {\r\n        posts: List(data)\r\n      }\r\n    })\r\n  } catch (error) {\r\n    yield put<ErrorPostsAction>({\r\n      type: PostsActionTypes.ERROR,\r\n      payload: {\r\n        error: error\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { takeLatest } from 'redux-saga/effects'\r\nimport * as actions from '../actions'\r\nimport { loadPostsEffect } from './post-page.effects'\r\n\r\nexport function* allSagas() {\r\n  yield takeLatest(actions.PostsActionTypes.LOAD, loadPostsEffect)\r\n}\r\n","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { TodoCaption, TodoList } from '../../components/todo'\r\nimport { Todo } from '../../models'\r\nimport { List } from 'immutable'\r\nimport { State, getTodos, addTodo, TodoAction, deleteTodo } from '../../store'\r\n\r\ninterface ITodoPageProps {\r\n  todos: List<Todo>\r\n  add: (value: string) => TodoAction\r\n  delete: (id: number) => TodoAction\r\n}\r\n\r\nclass TodoPage extends React.Component<ITodoPageProps> {\r\n  onAddClick = (value: string) => {\r\n    if (value.trim() === '') {\r\n      return\r\n    }\r\n    this.props.add(value)\r\n  }\r\n\r\n  onItemClick = (index: number) => {\r\n    this.props.delete(index)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"scroll-y page\">\r\n        <section className=\"hero is-info\">\r\n          <div className=\"hero-body\">\r\n            <div className=\"container\">\r\n              <h1 className=\"title\">Todo Page</h1>\r\n              <h2 className=\"subtitle\">create a todo list</h2>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className=\"m5\">\r\n          <div className=\"flex\">\r\n            <TodoCaption onAdd={this.onAddClick} />\r\n          </div>\r\n        </section>\r\n        <section>\r\n          <TodoList itemClick={this.onItemClick} list={this.props.todos} />\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  todos: getTodos(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  add: addTodo,\r\n  delete: deleteTodo\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoPage)\r\n","import * as React from 'react'\r\n\r\ninterface IPostItemProps {\r\n  title: string\r\n  body: string\r\n}\r\n\r\nconst postItem = (props: IPostItemProps) => (\r\n  <div className=\"card\">\r\n    <div className=\"card-content\">\r\n      <p className=\"title\">“{props.title}”</p>\r\n      <p className=\"subtitle\">{props.body}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default postItem\r\n","import * as React from 'react'\r\nimport PostItem from '../post-item/post-item'\r\nimport { Post } from '../../../models'\r\nimport { List } from 'immutable'\r\n\r\ninterface IPostListProps {\r\n  list: List<Post>\r\n}\r\n\r\nconst postList = (props: IPostListProps) => {\r\n  const list = props.list.map(post => (\r\n    <div className=\"column is-4\" key={post.id}>\r\n      <PostItem title={post.title} body={post.body} />\r\n    </div>\r\n  ))\r\n\r\n  return <div className=\"columns is-multiline\">{list}</div>\r\n}\r\n\r\nexport default React.memo(postList)\r\n","import * as React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { PostList } from '../../components/post'\r\nimport { List } from 'immutable'\r\nimport { Post, AsyncDataState } from '../../models'\r\nimport { State, getPosts, getPostsDataState, loadPosts, LoadPostsAction } from '../../store'\r\n\r\ninterface Props {\r\n  posts: List<Post>\r\n  dataState: AsyncDataState\r\n  load: () => LoadPostsAction\r\n}\r\n\r\nclass PostPage extends React.Component<Props, {}> {\r\n  componentDidMount() {\r\n    this.props.load()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"scroll-y page\">\r\n        <section className=\"hero is-info\">\r\n          <div className=\"hero-body\">\r\n            <div className=\"container\">\r\n              <h1 className=\"title\">Posts Page</h1>\r\n              <h2 className=\"subtitle\">see all the posts</h2>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className=\"m5\">\r\n          <PostList list={this.props.posts} />\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  posts: getPosts(state),\r\n  dataState: getPostsDataState(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  load: loadPosts\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostPage)\r\n","import * as React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass HomePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <section className=\"hero is-info\">\r\n          <div className=\"hero-body\">\r\n            <div className=\"container\">\r\n              <h1 className=\"title\">Home Page</h1>\r\n              <h2 className=\"subtitle\">see all the posts</h2>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className=\"m5\">\r\n          <Link to=\"/todo\">\r\n            <button className=\"button is-link\">Todo</button>\r\n          </Link>\r\n          <Link to=\"/posts\">\r\n            <button className=\"button is-link\">Posts</button>\r\n          </Link>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage\r\n","import * as React from 'react'\r\nimport { Route, BrowserRouter, Switch, Redirect } from 'react-router-dom'\r\nimport { TodoPage } from '../todo-page'\r\nimport { PostPage } from '../post-page'\r\nimport { HomePage } from '../home-page'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route path=\"/home\" exact component={HomePage} />\r\n            <Route path=\"/todo\" component={TodoPage} />\r\n            <Route path=\"/posts\" component={PostPage} />\r\n            <Redirect from=\"/\" to=\"/home\" />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport './index.scss'\r\nimport App from './containers/app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport { compose, createStore, applyMiddleware } from 'redux'\r\nimport { reducer, allSagas } from './store'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst sagaMiddleWare = createSagaMiddleware()\r\n\r\nexport const store = createStore(reducer, composeEnhancers(applyMiddleware(sagaMiddleWare)))\r\nsagaMiddleWare.run(allSagas)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}